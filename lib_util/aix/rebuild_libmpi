#!/bin/ksh

# script to regenerate libmpi_r.a incorporating name-shifted profiling code
#
# David Skinner   May 2005 (dskinner@nersc.gov)
#

if [[ $1 != "32" && $1 != "64" ]] ; then
 echo "rebuild_mpi 32|64"
 exit
fi
 
export BITS=$1
export BITSUFFIX=$BITS

rm -rf $BITS
mkdir $BITS
cd $BITS

export USE_PMAPI=-lpmapi
export OBJECT_MODE=$BITS
export ORIGMPIPATH=/usr/lpp/ppe.poe

# exceptions : pm_initfini.o mpifmod_r.o
                                                                               
export OBJ=`ar -X $BITS t $ORIGMPIPATH/lib/libmpi_r.a | grep -v pm_initfini | grep -v mpifmod`

export NEWOBJ=`ar -X $BITS t $ORIGMPIPATH/lib/libmpi_r.a | sed -e 's/_r/_X/' | grep -v pm_initfini | grep -v mpifmod `


if [[ $BITS == "32" ]] ; then
 export XOBJ="pm_initfini.o mpifmod_r.o"
fi

if [[ $BITS == "64" ]] ; then
export XOBJ="pm_initfini64.o mpifmod64_r.o"
fi

rm -rf  *.exp 32 64 *.o *.a lib tmp*
mkdir lib
cp ../../lib/libipm.a .
ar -X $BITS vx libipm.a

echo "Step 0: Extract the shared objects from the libmpi_r.a archive"
ar -X $BITS xv $ORIGMPIPATH/lib/libmpi_r.a
cp $ORIGMPIPATH/lib/libmpi_r.a .

echo "Step 1: extract the export lists and make headers importing from libmpi_r.a(shared_object_name_r.o)"

for o in $OBJ ; do
 echo "Making exports for libmpi_r.a($o)"
 expo=`echo $o | sed -e 's/\.o/.exp/'`
 echo ../make_exp $BITS $o to $expo
 echo "#! libmpi_r.a($o)" > $expo
 ../make_exp $BITS $o >> $expo
done

#echo "Step 2: Build new _X shared objects"
#for o in $OBJ ; do
# newo=`echo $o | sed -e 's/_r/_X/'`
# expo=`echo $o | sed -e 's/\.o/.exp/'`
# echo rtl_enable -X $BITS -l -o $newo $o
# rtl_enable -X $BITS -l -o $newo $o
#done

#echo rm -f libmpi_X.a
#rm -f libmpi_X.a
#echo rm -f libvtd_r.a
#rm -f libvtd_r.a
#echo ar -rv libmpi_X.a $NEWOBJ
#ar -rv libmpi_X.a $NEWOBJ
#echo rm -f $OBJ
#rm -f $OBJ

echo "Step 3: Rebuild shared objects linking in IPM and _X"
for o in $OBJ ; do
 news=`echo $o | sed -e 's/\.o/.sh/'`
#other_way echo rtl_enable -X $BITS -l -R -s $o -L. -lmpi_r -lc_r -lpthreads 
#other_way rtl_enable -X $BITS -l -R -s $o -L. -lmpi_r -lc_r -lpthreads 
 echo rtl_enable -X $BITS -l -R -s $o -L. -lc_r -lpthreads 
 rtl_enable -X $BITS -l -R -s $o -L. -lc_r -lpthreads  -lpmapi
 if [[ $o == "mpicore_r.o" ]] ; then
  sed -e 's/mpicore_r.o -b/libipm.o mpicore_r.o -b/' $news > tmp.$nnews
  mv tmp.$nnews $news
 fi
 if [[ $o == "mpicore64_r.o" ]] ; then
  sed -e 's/mpicore64_r.o -b/libipm_64.o mpicore64_r.o -b/' $news > tmp.$nnews 
  mv tmp.$nnews $news
 fi
 sed -e 's/-bnortllib -bnosymbolic -bnoautoexp/-bM:SRE -H512 -T512 -bnoentry -bnoobjreorder/' $news > tmp.$nnews
 mv tmp.$nnews $news
 cat $news 
  chmod a+rx $news
 ./$news
done

echo rm -f libmpi_r.a
rm -f libmpi_r.a
echo ar -X $BITS rv libmpi_r.a $OBJ $XOBJ
ar -X $BITS rv libmpi_r.a $OBJ $XOBJ

cd ..

echo 
